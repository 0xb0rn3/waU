#!/bin/bash
# Wireless Toolkit v5.0 - Complete Injection Testing
# With RTL8812 Validation and Advanced Diagnostics

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
NC='\033[0m'

declare -A CHIPSET_DB=(
    ["0bda:8812"]="Realtek RTL8812AU (Certified)"
    ["0bda:881a"]="Realtek RTL8812AU (Clone)"
    ["0bda:881b"]="Realtek RTL8812AU (Clone)"
    ["0bda:881c"]="Realtek RTL8812BU (Invalid)"
    ["0e8d:7612"]="MediaTek MT7612U"
    ["0cf3:9271"]="Atheros AR9271"
    ["148f:5572"]="Ralink RT5572"
)

declare -A DRIVER_REPOS=(
    ["Realtek RTL8812AU (Certified)"]="https://github.com/aircrack-ng/rtl8812au.git"
    ["Realtek RTL8812AU (Clone)"]="https://github.com/morrownr/8812au-20210629.git"
    ["MediaTek MT7612U"]="https://github.com/openwrt/mt76.git"
    ["Atheros AR9271"]="builtin"
    ["Ralink RT5572"]="builtin"
)

declare -A INJECTION_TESTS=(
    ["BASIC"]="aireplay-ng -9"
    ["BURST"]="aireplay-ng -9 -p 2048"
    ["FLOOD"]="aireplay-ng -9 -p 4096 -x 512"
)

validate_rtl8812() {
    local id=$1 bus=$2 device=$3
    echo -e "${YELLOW}[*] Starting RTL8812 Hardware Validation...${NC}"
    
    # Check USB descriptor
    local vendor_info=$(lsusb -d "$id" -v 2>/dev/null | grep -A 5 "idProduct" | grep -E "iProduct|iSerial")
    if [[ "$vendor_info" != *"RTL8812"* ]]; then
        echo -e "${RED}[-] Invalid USB descriptors detected${NC}"
        return 2
    fi

    # Check sysfs firmware info
    local sysfs_path="/sys/bus/usb/devices/$bus-$device/"
    [ -f "${sysfs_path}version" ] || return 1
    local fw_ver=$(cat "${sysfs_path}version")
    [[ "$fw_ver" == *"8812"* ]] || return 1

    # Check PCI subsystem (for USB-to-PCIe adapters)
    local pci_info=$(lspci -nn | grep "$id")
    [ -z "$pci_info" ] || [[ "$pci_info" != *"Wireless"* ]] && return 3

    return 0
}

advanced_injection_test() {
    local iface=$1
    echo -e "${YELLOW}[*] Starting Advanced Injection Test Suite...${NC}"
    
    for test in "${!INJECTION_TESTS[@]}"; do
        echo -e "${BLUE}[+] Running $test Test...${NC}"
        local cmd="${INJECTION_TESTS[$test]} $iface"
        local output=$(timeout 20 sudo $cmd 2>&1)
        
        # Parse results
        local sent=$(echo "$output" | grep "Injected" | awk '{print $2}')
        local success=$(echo "$output" | grep "Success" | awk '{print $4}')
        local ratio=$(( (success * 100) / sent )) 2>/dev/null
        
        printf "%-10s | Packets: %-5s | Success: %-5s | Ratio: %-3s%%\n" \
               "$test" "${sent:-0}" "${success:-0}" "${ratio:-0}"
    done

    # Final validation
    local avg_ratio=$(echo "$output" | grep "Average" | awk '{print $4}')
    echo -e "${CYAN}[*] Average Injection Rate: ${avg_ratio:-N/A}${NC}"
}

enhanced_adapter_detect() {
    echo -e "${YELLOW}[*] Starting Deep Hardware Scan...${NC}"
    local found=0
    
    while read -r line; do
        local bus=$(echo "$line" | awk '{print $2}')
        local device=$(echo "$line" | awk '{print $4}' | tr -d ':')
        local id=$(echo "$line" | awk '{print $6}')
        local chipset="${CHIPSET_DB[$id]}"
        local driver=$(lsmod | grep -m1 -E '88|mt76|ath9k|rt28' | awk '{print $1}')
        
        # RTL8812 Validation
        if [[ "$id" == "0bda:8812" ]]; then
            validate_rtl8812 "$id" "$bus" "$device"
            case $? in
                1) chipset="${RED}RTL8812AU (Invalid Firmware)${NC}" ;;
                2) chipset="${RED}RTL8812AU (Counterfeit)${NC}" ;;
                3) chipset="${RED}RTL8812AU (PCI Mismatch)${NC}" ;;
            esac
        fi

        echo -e "${CYAN}----------------------------------------"
        echo -e "USB Path:    ${bus}:${device}"
        echo -e "Chipset:     ${chipset:-${RED}Unknown${NC}}"
        echo -e "Driver:      ${driver:-${RED}Not Loaded${NC}}"
        echo -e "Device ID:   ${id}"
        echo -e "SysFS:       /sys/bus/usb/devices/${bus}-${device}/"
        found=1
    done < <(lsusb | grep -Ei 'wireless|network|802.11' | awk '{print $2, $4, $6}')

    [ $found -eq 0 ] && echo -e "${RED}[-] No Wireless Adapters Detected${NC}"
}

install_driver() {
    local chipset=$1
    echo -e "${YELLOW}[*] Starting Driver Installation...${NC}"
    
    case $chipset in
        *"RTL8812AU"*)
            if [[ "$chipset" == *"Certified"* ]]; then
                repo="https://github.com/aircrack-ng/rtl8812au.git"
            else
                repo="https://github.com/morrownr/8812au-20210629.git"
            fi
            git clone --depth 1 "$repo" /tmp/rtl8812_install
            cd /tmp/rtl8812_install
            
            # Kernel compatibility patches
            if uname -r | grep -q "5.1[5-9]"; then
                patch -p1 < <(curl -sL https://patch-diff.githubusercontent.com/raw/aircrack-ng/rtl8812au/pull/647.patch)
            fi
            ;;
            
        *"MT7612U"*)
            git clone https://github.com/openwrt/mt76.git /tmp/mt76_install
            cd /tmp/mt76_install
            ;;
    esac

    # Compilation and installation
    make clean && make -j$(nproc)
    sudo make install || sudo dkms install .
    sudo depmod -a
    sudo modprobe "${chipset%% *}" 2>/dev/null
    [ $? -eq 0 ] && echo -e "${GREEN}[+] Driver Activated${NC}" || echo -e "${RED}[-] Load Failed${NC}"
}

monitor_mode_control() {
    local action=$1 iface=$2
    case $action in
        start)
            echo -e "${YELLOW}[*] Starting Monitor Mode...${NC}"
            sudo ip link set "$iface" down
            sudo iw "$iface" set monitor control
            sudo ip link set "$iface" up
            ;;
        stop)
            echo -e "${YELLOW}[*] Stopping Monitor Mode...${NC}"
            sudo airmon-ng stop "$iface"
            sudo systemctl restart NetworkManager
            ;;
    esac
}

main_menu() {
    while true; do
        clear
        echo -e "${CYAN}Wireless Toolkit v5.0${NC}"
        echo -e "${BLUE}1. Detect Adapters (Advanced)"
        echo "2. Install Drivers"
        echo "3. Injection Test Suite"
        echo "4. Monitor Mode Control"
        echo "5. Driver Cleanup"
        echo "6. Exit${NC}"
        read -rp "Select: " choice

        case $choice in
            1) enhanced_adapter_detect ;;
            2)
                echo "Available Chipsets:"
                for c in "${!CHIPSET_DB[@]}"; do
                    echo "- ${CHIPSET_DB[$c]} ($c)"
                done
                read -rp "Enter Chipset ID: " chip_id
                install_driver "${CHIPSET_DB[$chip_id]}" ;;
            3)
                read -rp "Enter Interface: " iface
                advanced_injection_test "$iface" ;;
            4)
                read -rp "Interface: " iface
                select opt in "Start Monitor" "Stop Monitor"; do
                    case $opt in
                        "Start Monitor") monitor_mode_control start "$iface" ;;
                        "Stop Monitor") monitor_mode_control stop "$iface" ;;
                    esac
                    break
                done ;;
            5)
                echo -e "${YELLOW}[*] Cleaning System...${NC}"
                sudo make -C /tmp/*_install clean 2>/dev/null
                sudo rm -rf /tmp/*_install
                sudo dkms remove -a 2>/dev/null ;;
            6) exit 0 ;;
        esac
        read -rp "Press Enter to continue..."
    done
}

# Initial Checks
[ "$(id -u)" -ne 0 ] && { echo -e "${RED}Run as root!${NC}"; exit 1; }
check_dependencies() {
    [ -f "/usr/bin/aircrack-ng" ] || echo -e "${YELLOW}[!] Install aircrack-ng for full functionality${NC}"
}
check_dependencies

main_menu
