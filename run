#!/bin/bash
# Wireless Adapter Management Tool v3.1 (Full Version)
# Supports Debian/Ubuntu, Fedora, Arch, and derivatives

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

declare -A CHIPSET_DB=(
    # MediaTek Chipsets
    ["0e8d:7610"]="MediaTek MT7610U"
    ["0e8d:7612"]="MediaTek MT7612U"
    ["0e8d:7630"]="MediaTek MT7613U"
    ["0e8d:7961"]="MediaTek MT7921U"
    
    # Realtek
    ["0bda:8812"]="Realtek RTL8812AU"
    ["0bda:8814"]="Realtek RTL8814AU"
    ["0bda:b812"]="Realtek RTL88x2BU"
    
    # Atheros/Ralink
    ["0cf3:9271"]="Atheros AR9271"
    ["148f:5370"]="Ralink RT5370"
    ["148f:5572"]="Ralink RT5572"
)

declare -A DRIVER_REPOS=(
    # MediaTek Drivers
    ["MediaTek MT7610U"]="https://github.com/openwrt/mt76.git"
    ["MediaTek MT7612U"]="https://github.com/openwrt/mt76.git"
    ["MediaTek MT7613U"]="https://github.com/openwrt/mt76.git"
    ["MediaTek MT7921U"]="https://github.com/morrownr/MT7921u-Linux-Driver.git"
    
    # Realtek
    ["Realtek RTL8812AU"]="https://github.com/lwfinger/rtl8812au.git"
    ["Realtek RTL8814AU"]="https://github.com/lwfinger/rtl8814au.git"
    ["Realtek RTL88x2BU"]="https://github.com/lwfinger/rtl88x2bu.git"
    
    # Built-in Drivers
    ["Atheros AR9271"]="ath9k_htc"
    ["Ralink RT5370"]="rt2800usb"
    ["Ralink RT5572"]="rt2800usb"
)

detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$ID"
    else
        echo "unknown"
    fi
}

check_dependencies() {
    local distro=$(detect_distro)
    echo -e "${YELLOW}[*] Checking dependencies...${NC}"
    case $distro in
        "debian"|"ubuntu"|"kali"|"parrot")
            sudo apt-get update
            sudo apt-get install -y git build-essential dkms linux-headers-$(uname -r) \
                usbutils wireless-tools aircrack-ng ;;
        "fedora")
            sudo dnf install -y git kernel-devel kernel-headers dkms usbutils iw \
                aircrack-ng ;;
        "arch"|"manjaro")
            sudo pacman -S --needed --noconfirm git base-devel linux-headers dkms \
                usbutils crda aircrack-ng ;;
        *) echo -e "${RED}[-] Unsupported distribution${NC}"; return 1 ;;
    esac
}

detect_adapters() {
    echo -e "${YELLOW}[*] Detecting wireless adapters...${NC}"
    local found=0
    
    while read -r line; do
        local bus=$(echo "$line" | awk '{print $1}')
        local id=$(echo "$line" | awk '{print $2}')
        local name=$(echo "$line" | cut -d'#' -f2- | sed 's/^ //')
        local chipset="${CHIPSET_DB[$id]}"
        local driver=$(lsusb -vd $id 2>/dev/null | grep "Driver=" | cut -d'=' -f2)

        [ -z "$name" ] && name="Unknown (generic)"
        [ -z "$chipset" ] && chipset="${RED}Unsupported chipset${NC}"
        [ -z "$driver" ] && driver="${RED}Not loaded${NC}"

        echo -e "${CYAN}Adapter detected:${NC}"
        echo -e "Name:    ${name}"
        echo -e "Chipset: ${chipset}"
        echo -e "USB ID:  ${id}"
        echo -e "Driver:  ${driver}"
        echo -e "Bus:     ${bus}"
        echo "----------------------------------------"
        found=1
    done < <(lsusb | grep -iE 'Wireless|Network|802.11' | \
             awk '{gsub(/:/,"",$6); print $2 " " $4 ":" $6 " # " $7 " " $8 " " $9 " " $10}')

    [ $found -eq 0 ] && echo -e "${RED}[-] No compatible wireless adapters detected!${NC}"
}

install_mediatek_driver() {
    local chipset=$1
    local repo=${DRIVER_REPOS[$chipset]}
    
    echo -e "${YELLOW}[*] Installing MediaTek driver for ${chipset}...${NC}"
    
    git clone --depth 1 "$repo" "/tmp/${chipset// /_}" || {
        echo -e "${RED}[-] Clone failed! Check internet connection${NC}"
        return 1
    }
    
    cd "/tmp/${chipset// /_}" || return 1

    case $chipset in
        "MediaTek MT7921U")
            make clean && make -j$(nproc)
            sudo make install
            sudo depmod -a
            sudo modprobe mt7921u ;;
        *)
            make clean
            make -j$(nproc)
            sudo make install
            sudo depmod -a
            sudo modprobe mt76x2u ;;
    esac

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}[+] MediaTek driver installed successfully!${NC}"
        return 0
    else
        echo -e "${RED}[-] Installation failed! Check kernel compatibility${NC}"
        return 1
    fi
}

install_driver() {
    local chipset=$1
    local distro=$(detect_distro)
    
    if [[ "$chipset" == MediaTek* ]]; then
        install_mediatek_driver "$chipset"
        return $?
    fi

    if [[ "${DRIVER_REPOS[$chipset]}" == *"built-in"* ]]; then
        echo -e "${GREEN}[+] Driver is already included in the kernel${NC}"
        return 0
    fi

    local repo="${DRIVER_REPOS[$chipset]}"
    [ -z "$repo" ] && {
        echo -e "${RED}[-] No driver repository found for ${chipset}${NC}"
        return 1
    }

    echo -e "${YELLOW}[*] Installing driver for ${chipset}...${NC}"
    git clone --depth 1 "$repo" "/tmp/${chipset// /_}" || {
        echo -e "${RED}[-] Clone failed! Check internet connection${NC}"
        return 1
    }
    
    cd "/tmp/${chipset// /_}" || return 1

    case $distro in
        "debian"|"ubuntu"|"kali"|"parrot")
            make clean && make
            sudo make install
            sudo modprobe "${chipset// /}" ;;
        "fedora")
            sudo dkms add .
            sudo dkms build -m "${chipset// /}" -v $(git describe --tags)
            sudo dkms install -m "${chipset// /}" -v $(git describe --tags) ;;
        "arch"|"manjaro")
            make clean && make
            sudo make dkms_install
            sudo depmod -a
            sudo modprobe "${chipset// /}" ;;
    esac

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}[+] Driver installed successfully!${NC}"
        return 0
    else
        echo -e "${RED}[-] Installation failed! Check dependencies${NC}"
        return 1
    fi
}

monitor_mode_test() {
    local iface=$(iw dev | awk '$1=="Interface"{print $2}' | head -n1)
    [ -z "$iface" ] && {
        echo -e "${RED}[-] No wireless interfaces found!${NC}"
        return 1
    }

    echo -e "${YELLOW}[*] Testing monitor mode on ${iface}...${NC}"
    sudo ip link set "$iface" down
    sudo iw "$iface" set monitor control
    sudo ip link set "$iface" up

    if iw dev "$iface" info | grep -q "type monitor"; then
        echo -e "${GREEN}[+] Monitor mode enabled successfully!${NC}"
        echo -e "${YELLOW}[*] Testing packet injection..."
        sudo aireplay-ng -9 "$iface" | grep --color=always -E "Injection|working|failed"
    else
        echo -e "${RED}[-] Failed to enable monitor mode!${NC}"
    fi
}

remove_monitor_mode() {
    local mon_iface=$(iw dev | awk '$1=="Interface" && $2~/mon/{print $2}')
    [ -z "$mon_iface" ] && {
        echo -e "${GREEN}[+] No active monitor interfaces found${NC}"
        return 0
    }

    echo -e "${YELLOW}[*] Disabling monitor mode on ${mon_iface}...${NC}"
    sudo airmon-ng stop "$mon_iface" >/dev/null
    sudo systemctl restart NetworkManager >/dev/null
    echo -e "${GREEN}[+] Monitor mode disabled${NC}"
}

driver_cleanup() {
    echo -e "${YELLOW}[*] Cleaning up temporary files...${NC}"
    rm -rf /tmp/*_driver /tmp/mt76 /tmp/mt7921u
}

main_menu() {
    while true; do
        clear
        echo -e "${YELLOW}=== Wireless Adapter Toolkit ===${NC}"
        echo -e "${CYAN}1. Detect Wireless Adapters"
        echo "2. Install Drivers"
        echo "3. Test Monitor Mode"
        echo "4. Remove Monitor Mode"
        echo "5. Check Dependencies"
        echo "6. Clean Temporary Files"
        echo "7. Exit${NC}"
        echo -n "Select option: "
        
        read -r choice
        case $choice in
            1) detect_adapters; read -rp "Press Enter to continue..." ;;
            2)
                echo -e "${CYAN}Available drivers:${NC}"
                for key in "${!DRIVER_REPOS[@]}"; do
                    echo "- $key"
                done
                echo -n "Enter exact chipset name: "
                read -r chipset
                install_driver "$chipset"
                read -rp "Press Enter to continue..." ;;
            3) monitor_mode_test; read -rp "Press Enter to continue..." ;;
            4) remove_monitor_mode; read -rp "Press Enter to continue..." ;;
            5) check_dependencies; read -rp "Press Enter to continue..." ;;
            6) driver_cleanup; read -rp "Press Enter to continue..." ;;
            7) driver_cleanup; exit 0 ;;
            *) echo -e "${RED}Invalid option!${NC}"; sleep 1 ;;
        esac
    done
}

# Initial checks
[ "$(id -u)" -ne 0 ] && {
    echo -e "${RED}This script must be run as root!${NC}"
    exit 1
}

trap driver_cleanup EXIT
check_dependencies
main_menu
